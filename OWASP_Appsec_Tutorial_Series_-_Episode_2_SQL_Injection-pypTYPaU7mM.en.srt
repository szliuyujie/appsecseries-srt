1
00:00:18,524 --> 00:00:20,864
Welcome back to the OWASP Application Security Tutorial Series. 

2
00:00:20,864 --> 00:00:22,067
My name is Jerry Hoff 

3
00:00:22,067 --> 00:00:26,246
and this is episode number two: Injection Attacks. 

4
00:00:28,352 --> 00:00:30,357
This tutorial series is for web developers 

5
00:00:30,357 --> 00:00:32,435
who want to write more secure code 

6
00:00:32,435 --> 00:00:36,312
and learning about injection attacks is a great place to start.  

7
00:00:36,312 --> 00:00:38,151
So in the next 10 minutes

8
00:00:38,151 --> 00:00:42,000
we're gonna go through common type of injection attacks, 

9
00:00:42,000 --> 00:00:43,499
known as SQL injections. 

10
00:00:44,000 --> 00:00:46,541
We'll then take a look at some other types of injection attacks. 

11
00:00:47,000 --> 00:00:49,000
I'll show you some common fixes. 

12
00:00:49,000 --> 00:00:51,527
And till to the end of video, 

13
00:00:51,527 --> 00:00:53,867
I'll point you some useful articles 

14
00:00:53,867 --> 00:00:56,207
and source code where you can learn more.

15
00:00:57,000 --> 00:00:58,279
So let's get started. 

16
00:00:59,000 --> 00:01:02,196
First of all, injection attacks are very serious problem. 

17
00:01:02,196 -->  00:01:05,171
To give you some idea, every few years

18
00:01:05,171 --> 00:01:09,148
the OWASP foundation puts a list top security risk 

19
00:01:09,148 --> 00:01:13,293
for enterprise web application known as the OWASP Top 10. 

20
00:01:13,293 --> 00:01:15,967
The risk reflects the collective judgement 

21
00:01:15,967 --> 00:01:19,550
of many-many security professionals in the industry. 

22
00:01:20,000 --> 00:01:22,926
And right now, the top risk, to web applications, 

23
00:01:22,926 --> 00:01:25,934
in their opinion, is injection. 

24
00:01:26,000 --> 00:01:29,778
So this is definitely something every web architect, 

25
00:01:29,778 --> 00:01:33,227
developer, and tester needs to be very familiar with. 

26
00:01:34,000 --> 00:01:36,770
And what makes it so dangerous is that easy to exploit, 

27
00:01:36,770 --> 00:01:39,511
it's pretty common in web application, 

28
00:01:39,511 --> 00:01:42,720
and the impact can be quite-quite severe. 

29
00:01:42,720 --> 00:01:47,734
So to make sure that we all have same idea what a SQL injection attack is, 

30
00:01:47,734 --> 00:01:51,760
let's do a quick example of the kind injection attack, 

31
00:01:51,784 --> 00:01:53,489
you'll most likely to see. 

32
00:01:53,489 --> 00:01:54,960
SQL injection. 

33
00:01:54,960 --> 00:01:56,197
So let's imagine, 

34
00:01:56,197 --> 00:01:59,004
an application that contains a simple form 

35
00:01:59,004 --> 00:02:00,843
asking for user data. 

36
00:02:00,843 --> 00:02:02,213
And to keep things simple, 

37
00:02:02,213 --> 00:02:04,458
we're gonna just focus on just one field, 

38
00:02:04,458 --> 00:02:05,494
the name field.

39
00:02:05,000 --> 00:02:07,767
Now as developers, where normally told, 

40
00:02:07,767 --> 00:02:09,539
how the application should work 

41
00:02:09,539 --> 00:02:11,511
and then we created. 

42
00:02:11,511 --> 00:02:13,951
So we imagine the user will filled up the form, 

43
00:02:13,951 --> 00:02:15,000
and then hit submit. 

44
00:02:15,000 --> 00:02:17,628
Where the data will leave the user's machine, 

45
00:02:17,628 --> 00:02:20,275
will be sent cross the Internet 

46
00:02:20,275 --> 00:02:23,217
where wind up entering our web application. 

47
00:02:23,217 --> 00:02:27,428
Now most web developers make heavy use of databases

48
00:02:27,428 --> 00:02:29,534
to store and retrieve data. 

49
00:02:29,534 --> 00:02.33,512
And to talk to database we use a language called SQL. 

50
00:02.33,512 --> 00:02:38,732
So very often the data that was entered by our users, 

51
00:02:38,732 --> 00:02:41,874
winds up as part of this SQL statement. 

52
00:02:41,874 --> 00:02:46,653
You can see the developers here joining a fragment of SQL statement 

53
00:02:46,653 --> 00:02:49,127
together with the user supplied data 

54
00:02:49,127 --> 00:02:50,671
to make a complete command.  

55
00:02.50,671 --> 00:02:53,078
This command is send to database, 

56
00:02:53,078 --> 00:02:55,885
where the database interprets and runs the command. 

57
00:02:56,000 --> 00:02:58,593
This is where the problem starts. 

58
00:02:58,593 --> 00:03:00,699
The application does work, 

59
00:03:00,699 --> 00:03:04,610
but the way how the code is written, is definitely not secure. 

60
00:03:04,000 --> 00:03:08,091
Let's look at the same application,  

61
00:03:08,000 --> 00:03:10,431 
but this time let's see what happen 

62
00:03:10,431 --> 00:03:13,373
when we add little extra something to the user data.

63
00:03:13,373 --> 00:03:15,980
Like last time, I'll enter my name 

64
00:03:15,980 --> 00:03:18,400
but this time I'll put a little SQL at the end. 

65
00:03:18,400 --> 00:03:23,000
I'll hit submit and send request across the Internet 

66
00:03:23,000 --> 00:03:23,540
to the target web application. 

67
00:03:23,540 --> 00:03:38,220
Like before, the user-supplied data is joined together with the SQL 

68
00:03:38,220 --> 00:03:32,799
but this time a bit of SQL I added to the end of my name, 

69
00:03:32,799 --> 00:03:36,400
actually alters the intended purpose of SQL statement. 

70
00:03:36,400 --> 00:03:39,800
The post line up perfectly to make a valid SQL statement. 

71
00:03:39,000 --> 00:03:43,802
But now this time instead of just selecting the record for one name, 

72
00:03:43,802 --> 00:03:46,476
it pulls down all the records. 

73
00:03:46,476 --> 00:03:48,248
Which is exactly, 

74
00:03:48,248 --> 00:03:51,000
how attackers pull out the attack like this. 

75
00:03:51,000 --> 00:03:52,900
For example, in a recent case, 

76
00:03:52,900 --> 00:03:57,479
attacker stole close to almost 200 thousand unencrypted user passwords 

77
00:03:57,479 --> 00:04:03,396
and 500 thousand user's email from a very popular tech website. 

78
00:04:03,396 --> 00:04:06,204
And another attack, due SQL injection, 

79
00:04:06,204 --> 00:04:11,825
30 million customer records were stolen from a popular online dating website. 

80
00:04:11,825 --> 00:04:15,535
As you can see, SQL injection, is a huge risk 

81
00:04:15,535 --> 00:04:19,847
where single code flaw leads to massive data loss. 

81
00:04:19,847 --> 00:04:24,867
It can either results the attackers taking over your entire database server. 

82
00:04:24,867 --> 00:04:29,000
For more information you can check out the OWASP Presentation 

83
00:04:29,000 --> 00:04:35,563
called "Advanced SQL Injection, to Operating System Full Control" by Bernardo Damele. 

84
00:04:35,563 --> 00:04:40,048
To make matters even worse, it's not just databases, 

85
00:04:40,048 --> 00:04:45,563
any interpreters, used by your web application, can potentially have this problem. 

86
00:04:45,563 --> 00:04:49,440
So what are the intepreters commonly used by web application? 

87
00:04:50,000 --> 00:04:52,181
Well obviously, databases. 

88
00:04:52,181 --> 00:04:56,299
And for authentication, very frequently you'll have LDAP servers, 

89
00:04:56,299 --> 00:05:03,820
plus an array of XML-based technology, like XSLT, XPATH, and other XML messaging format. 

90
00:05:03,820 --> 00:05:09,703
In addition, most web applications keep log files, which are not interpreted, 

91
00:05:09,703 --> 00:05:16,360
but attackers can actually inject into them, new lines, so that they can add fake log entries. 

92
00:05:16,360 --> 00:05:22,143
In some cases, we have web application that call shell scripts on the server, 

93
00:05:22,143 --> 00:05:28,333
where if you're not careful, you can wind up, submitting user-supplied data directly to the command line. 

94
00:05:29,000 --> 00:05:32,311
Essentially giving attackers shell access to your web server, 

95
00:05:32,000 --> 00:05:34,784
definitely not a good thing.  

96
00:05:34,784 --> 00:05:39,865
And of course, nearly every web browser has a javascript interpreter. 

97
00:05:39,000 --> 00:05:44,650
This type of injection is so common, we have a special name for it. 

98
00:05:44,650 --> 00:05:51,000
Cross Site Scripting aka XSS 

99
00:05:51,000 --> 00:05:48,561
which is the topic of the next episode. 

100
00:05:51,000 --> 00:05:56,890
So now that we know these are serious problem, how we defend ourself. 

101
00:05:57,000 --> 00:06:00,000
Let's deal with SQL injection first. 

102
00:06:00,000 --> 00:06:05,013
First of all please be aware that you cannot rely on javascript validation 

103
00:06:05,013 --> 00:06:07,520
or by sending data via the POST method. 

104
00:06:07,520 --> 00:06:11,631
Both of these techniques can be trivially circumvented using web proxy 

105
00:06:11,631 --> 00:06:13,910
which I'll demonstrate on the upcoming episode. 

106
00:06:14,000 --> 00:06:18,689
If you're constructing SQL statement in your web application, 

107
00:06:18,689 --> 00:06:21,965
make sure that you're using parameterized queries. 

108
00:06:21,000 --> 00:06:26,000
Parameterized queries aren't vulnerable to SQL injection attacks. 

109
00:06:26,000 --> 00:06:32,467
So, if you dynamically creating SQL statements within your web application, 

110
00:06:32,467 --> 00:06:35,000
normally this is your best bet. 

111
00:06:35,000 --> 00:06:38,000
So let's take a quick look at some code. 

112
00:06:40,000 --> 00:06:41,000
The first example is in Java. 

113
00:06:41,000 --> 00:06:43,637
So in this java code, 

114
00:06:43,637 --> 00:06:47,748
we put a question mark placeholder in the SQL statement 

115
00:06:47,748 --> 00:06:49,720
where we want the user data to go. 

116
00:06:50.000 --> 00:06:54,246
Now instead of the statement where using prepared statement 

117
00:06:54,246 --> 00:06:59,821
which allows us to safely replace the question mark with the user data. 

118
00:07:00,000 --> 00:07:03,000
Now let's move on to dot net. 

119
00:07:03,000 --> 00:07:05,905
dot net is almost the same thing. 

120
00:07:05,905 --> 00:07:09,248
We put a token in the SQL statement 

121
00:07:09,248 --> 00:07:11,621
where we want to safely insert user data, 

122
00:07:11,621 --> 00:07:14,094
we then instantiate the parameter instance, 

123
00:07:14,094 --> 00:07:17,543
and tell it the token name and value. 

124
00:07:17,543 --> 00:07:20,217
Then add we add the parameter to the command. 

125
00:07:22,000 --> 00:07:28,406
Now another solution is to not construct dynamic SQL statmement in the code, 

126
00:07:28,406 --> 00:07:31,554
and instead use stored procedure. 

127
00:07:31,000 --> 00:07:36,350
There are few security best practices you'll need to follow 

128
00:07:36,350 --> 00:07:38,674
when constructing and calling stored procedure 

129
00:07:38,674 --> 00:07:40,000
which won't be covered here 

130
00:07:40,000 --> 00:07:44, 256
but I'll point you to some resources on the web for learning more about that. 

131
00:07:45,000 --> 00:07:48,000
So those are your best bet for SQL injection. 

132
00:07:49,000 --> 00:07:51,147
But what about other interpreter that we discussed: 

133
00:07:51,147 --> 00:07:56,061
like XML, command line, LDAP and somebody others 

134
00:07:56,061 --> 00:08:01,248
well in those cases, those interpreters, do not support parameterized expression, 

135
00:08:01,248 --> 00:08:08,268
so you're gonna have to encode the user data before you concatenate together to make a command. 

136
00:08:08,000 --> 00:08:13,081
Now each interpreter is going to require a specific encoder 

137
00:08:13,081 --> 00:08:18,000
but I'm gonna show you on the web where you can download whole set of encoders 

138
00:08:18,000 --> 00:08:21,878
that can help you defend yourself against these type of injection attack. 

139
00:08:22,000 --> 00:08:28,000
Actually there are more about injection attack that you wanna know about. 

120
00:08:28,000 --> 00:08:34,000
This video however is just giving you a brief introduction, just the tip of the iceberg. 

121
00:08:34,000 --> 00:08:39,000
But hopefully now you have an idea about what injection are 

122
00:08:39,000 --> 00:08:37,620
and few of defenses that you can use to defend your self. 

123
00:08:40,000 --> 00:08:43,000
But you need to find out more to really build secure code. 

124
00:08:43,000 --> 00:08:47,000
So let's turn to the OWASP website. 

125
00:08:47,00 --> 00:08:49,634
Which is full articles that you ought to read 

126
00:08:49,634 --> 0:08:53,745
in order to giver yourself a more complete understanding of injection attacks. 

127
00:08:54,000 --> 00:08:59,896
Definitely reading The SQL Injection Prevention Cheat Sheet 

128
00:08:59,896 --> 00:09:02,670
which gives you more information about prepared statements

129
00:09:02,670 --> 00:09:06,252
stored procedures, and escaping data. 

130
00:09:06,000 --> 00:09:122,000
Then check out the articles on XPATH Injection, 

131
00:09:12,000 --> 00:09:16,000
Log Injection, and Command Injection. 

132
00:09:16,000 --> 00:09:18,500
And the last thing I want to show you 

133
00:09:18,500 --> 00:09:22,269
is where you could get those encoders that I spoke about before. 

134
00:09:22,269 --> 00:09:24,843
For good references examples on encoders, 

135
00:09:24,843 --> 00:09:30,091
find the OWASP Enterprise Security API also known as ESAPI. 

136
00:09:30,091 --> 00:09:34,976
ESAPI is free and open source, and I encourage you to take a look at the source code 

137
00:09:34,976 --> 00:09:39,456
and check out the encoders which you can use properly encode untrusted data 

138
00:09:39,456 --> 00:09:42,364
and defend yourself against attacks we've discussed.  

139
00:09:42,000 --> 00:09:48,000
So that's it for this episode of this OWASP AppSec Tutorial Series. 

140
00:09:48,000 --> 00:09:51,000
I hope I had give you a bit more insights on injection attacks. 

141
00:09:51,000 --> 00:09:59,000
Links to all the articles and resources, mentioned in this episode can be found on freecbt.com 

142
00:09:59,000 --> 00:10:03,000
Special thank you to all those who gave feedback for the show. 

143
00:10:03,000 --> 00:10:09,000
Be sure to follow our youtube channel and get notified when new episode become available. 

144
00:10:09,000 --> 00:10:14,000
This Jerry Hoff signing out and I'll look forward to talk to you next time
